Lmdd7 <- theta[(7*L1)]
gamma1 <- theta[(7*L1+1)]
gamma2 <- theta[(7*L1+1+1):(7*L1+1+L1)]
Qd <- theta[(7*L1+1+L1+1):(7*L1+1+2*L1)]
Rd <- theta[(7*L1+1+2*L1+1):(7*L1+1+2*L1+O1)]
Rd
theta
theta <- list(B11=B11, B12=B12, B21d=B21d, B22d=B22d, B31=B31, B32=B32,
Lmdd1=Lmdd1, Lmdd2=Lmdd2, Lmdd3=Lmdd3, Lmdd4=Lmdd4, Lmdd5=Lmdd5, Lmdd6=Lmdd6, Lmdd7=Lmdd7,
Qd=Qd, Rd=Rd, gamma1=gamma1, gamma2=gamma2)
theta
filtered
set.seed(seed + init)
lEpsilon <- 1e-3
ceil <- 1e15
sEpsilon <- 1e-15
lr <- 1e-3
epsilon <- 1e-8
betas <- c(.9, .999)
const <- (2*pi)**(-O1/2)
#####################
# Measurement model #
#####################
model_cfa <- '
# latent variables
IQ =~ abiMath + TIMMS + totIQ'
y2_df <- as.data.frame(y2[,2:4])
colnames(y2_df) <- c('abiMath', 'TIMMS', 'totIQ')
fit_cfa <- cfa(model_cfa, data=y2_df)
eta2_score <- lavPredict(fit_cfa, method='Bartlett')
eta2 <- as.array(eta2_score[,1])
y1 <- torch_tensor(y1[,,1:O1])
eta2 <- torch_tensor(eta2)
sumLik_best <- -99
output_best <- NULL
# cat('Init step ', init, '\n')
iter <- 1
count <- 0
m <- v <- m_hat <- v_hat <- list()
# initialize parameters
B11 <- torch_tensor(abs(rnorm(L1, 0, .3)))
B12 <- torch_tensor(-abs(rnorm(L1, 0, .2)))
B21d <- torch_tensor(runif(L1, .6, 1))
B22d <- torch_tensor(runif(L1, .2, .6))
B31 <- torch_tensor(abs(rnorm(L1, 0, .15)))
B32 <- torch_tensor(-abs(rnorm(L1, 0, .1)))
Lmdd1 <- torch_tensor(runif(1, .5, 1.5))
Lmdd2 <- torch_tensor(runif(1, .5, 1.5))
Lmdd3 <- torch_tensor(runif(1, .5, 1.5))
Lmdd4 <- torch_tensor(runif(1, .5, 1.5))
Lmdd5 <- torch_tensor(runif(1, .5, 1.5))
Lmdd6 <- torch_tensor(runif(1, .5, 1.5))
Lmdd7 <- torch_tensor(runif(1, .5, 1.5))
gamma1 <- torch_tensor(4) # fixed
gamma2 <- torch_tensor(abs(rnorm(L1, 0, 1)))
Qd <- torch_tensor(rep(.3, L1)) # fixed
Rd <- torch_tensor(rep(.5, O1)) # fixed
theta <- list(B11=B11, B12=B12, B21d=B21d, B22d=B22d, B31=B31, B32=B32,
Lmdd1=Lmdd1, Lmdd2=Lmdd2, Lmdd3=Lmdd3, Lmdd4=Lmdd4, Lmdd5=Lmdd5, Lmdd6=Lmdd6, Lmdd7=Lmdd7,
Qd=Qd, Rd=Rd, gamma1=gamma1, gamma2=gamma2)
q <- length(torch_cat(theta))
jEta <- torch_full(c(N,Nt+1,2,2,L1), 0)
jP <- torch_full(c(N,Nt+1,2,2,L1,L1), 0)
jV <- torch_full(c(N,Nt,2,2,O1), NaN)
jF <- torch_full(c(N,Nt,2,2,O1,O1), NaN)
jEta2 <- torch_full(c(N,Nt,2,2,L1), 0)
jP2 <- torch_full(c(N,Nt,2,2,L1,L1), 0)
mEta <- torch_full(c(N,Nt+1,2,L1), 0)
mP <- torch_full(c(N,Nt+1,2,L1,L1), NaN)
W <- torch_full(c(N,Nt,2,2), NaN)
jPr <- torch_full(c(N,Nt+1,2,2), 0)
mLik <- torch_full(c(N,Nt), NaN)
jPr2 <- torch_full(c(N,Nt,2,2), 0)
mPr <- torch_full(c(N,Nt+2,2), NaN)
jLik <- torch_full(c(N,Nt,2,2), 0)
tPr <- torch_full(c(N,Nt+1,2,2), NaN)
KG <- torch_full(c(N,Nt,2,2,L1,O1), 0)
I_KGLmd <- torch_full(c(N,Nt,2,2,L1,L1), NaN)
subEta <- torch_full(c(N,Nt,2,2,L1), NaN)
eta1_pred <- torch_full(c(N,Nt+2,L1), NaN)
P_pred <- torch_full(c(N,Nt+2,L1,L1), NaN)
mP[,1,,,] <- torch_eye(L1)
mPr[,1,1] <- 1
mPr[,1,2] <- 0
tPr[,,1,2] <- 0
tPr[,,2,2] <- 1
Lmd <- torch_full(c(O1,L1), 0)
Lmd[1,1] <- Lmd[4,2] <- Lmd[6,3] <- Lmd[8,4] <- Lmd[10,5] <- Lmd[12,6] <- Lmd[15,7] <- 1
Lmd[2:3,1] <- Lmdd1
Lmd[5,2] <- Lmdd2
Lmd[7,3] <- Lmdd3
Lmd[9,4] <- Lmdd4
Lmd[11,5] <- Lmdd5
Lmd[13:14,6] <- Lmdd6
Lmd[16:17,7] <- Lmdd7
B21 <- B21d$diag()
B22 <- B22d$diag()
LmdT <- Lmd$transpose(1, 2)
Q <- Qd$diag()
R <- Rd$diag()
B1 <- torch_cat(c(B11, B12))$reshape(c(2, L1))
B2 <- torch_cat(c(B21, B22))$reshape(c(2, L1, L1))
B3 <- torch_cat(c(B31, B32))$reshape(c(2, L1))
for (t in 1:Nt) {
for (i in 1:N) {
#################
# Kalman filter #
#################
if (as.logical(sum(torch_isnan(y1[i,t,]))) <= 0) {
jEta[i,t,,,] <- B1$unsqueeze(-2) + mEta[i,t,,]$clone()$unsqueeze(2)$matmul(B2) + eta2[i]$clone()$unsqueeze(-1)$unsqueeze(-1)$unsqueeze(-1) * B3$unsqueeze(-2)
jP[i,t,,,,] <- mP[i,t,,,]$clone()$unsqueeze(2)$matmul(B2[2,,]**2) + Q$expand(c(2, 2, -1, -1))
jV[i,t,,,] <- y1[i,t,]$clone()$unsqueeze(-2)$unsqueeze(-2) - jEta[i,t,,,]$clone()$matmul(LmdT) # possible missingness
jF[i,t,,,,] <- Lmd$matmul(jP[i,t,,,,]$clone()$matmul(LmdT)) + R$expand(c(2, 2, -1, -1))
KG[i,t,,,,] <- jP[i,t,,,,]$clone()$matmul(LmdT)$matmul(jF[i,t,,,,]$clone()$cholesky_inverse())
jEta2[i,t,,,] <- jEta[i,t,,,] + KG[i,t,,,,]$clone()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()
I_KGLmd[i,t,,,,] <- torch_eye(L1)$expand(c(2,2,-1,-1)) - KG[i,t,,,,]$clone()$matmul(Lmd)
jP2[i,t,,,,] <- I_KGLmd[i,t,,,,]$clone()$matmul(jP[i,t,,,,]$clone())$matmul(I_KGLmd[i,t,,,,]$clone()$transpose(3, 4)) +
KG[i,t,,,,]$clone()$matmul(R)$matmul(KG[i,t,,,,]$clone()$transpose(3, 4))
jLik[i,t,,] <- sEpsilon + const * jF[i,t,,,,]$clone()$det()$clip(min=sEpsilon, max=ceil)**(-1) *
(-.5 * jF[i,t,,,,]$clone()$cholesky_inverse()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$unsqueeze(-2)$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$squeeze())$exp() # possible missingness
###################
# Hamilton filter #
###################
eta1_pred[i,t,] <- mPr[i,t,1]$clone()$unsqueeze(-1) * mEta[i,t,1,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1) * mEta[i,t,2,]$clone()
P_pred[i,t,,] <- mPr[i,t,1]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,1,,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,2,,]$clone()
tPr[i,t,1,1] <- (gamma1 + eta1_pred[i,t,]$clone()$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[i,t,2,1] <- 1 - tPr[i,t,1,1]
jPr[i,t,,] <- tPr[i,t,,]$clone() * mPr[i,t,]$clone()$unsqueeze(-1)
mLik[i,t] <- (jLik[i,t,,]$clone() * jPr[i,t,,]$clone())$sum()
jPr2[i,t,,] <- jLik[i,t,,]$clone() * jPr[i,t,,]$clone() / mLik[i,t]$clone()$unsqueeze(-1)$unsqueeze(-1) # possible missingness
mPr[i,t+1,] <- jPr2[i,t,,]$sum(2)$clip(min=sEpsilon, max=1-sEpsilon)
W[i,t,,] <- jPr2[i,t,,]$clone() / mPr[i,t+1,]$clone()$unsqueeze(-1)
mEta[i,t+1,,] <- (W[i,t,,]$clone()$unsqueeze(-1) * jEta2[i,t,,,]$clone())$sum(2)
subEta[i,t,,,] <- mEta[i,t+1,,]$unsqueeze(2) - jEta2[i,t,,,]
mP[i,t+1,,,] <- (W[i,t,,]$clone()$unsqueeze(-1)$unsqueeze(-1) * (jP2[i,t,,,,] + subEta[i,t,,,]$clone()$unsqueeze(-1)$matmul(subEta[i,t,,,]$clone()$unsqueeze(-2))))$sum(2)
}
if (as.logical(sum(torch_isnan(y1[i,t,]))) > 0) {
jEta2[i,t,,,] <- jEta2[i,t-1,,,]$clone()
jP2[i,t,,,,] <- jP2[i,t-1,,,,]$clone()
mEta[i,t+1,,] <- mEta[i,t,,]$clone()
mP[i,t+1,,,] <- mP[i,t,,,]$clone()
jPr2[i,t,,] <- jPr2[i,t-1,,]$clone()
mPr[i,t+1,] <- mPr[i,t,]$clone()
}
}
}
eta1_pred[,Nt+1,] <- mPr[,Nt+1,1]$unsqueeze(-1) * mEta[,Nt+1,1,] + mPr[,Nt+1,2]$unsqueeze(-1) * mEta[,Nt+1,2,]
P_pred[,Nt+1,,] <- mPr[,Nt+1,1]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,1,,] + mPr[,Nt+1,2]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,2,,]
jEta[,Nt+1,1,1,] <- B11 + mEta[,Nt+1,1,]$matmul(B21) + eta2$outer(B31)
jEta[,Nt+1,2,1,] <- B12 + mEta[,Nt+1,1,]$matmul(B22) + eta2$outer(B32)
jEta[,Nt+1,2,2,] <- B12 + mEta[,Nt+1,2,]$matmul(B22) + eta2$outer(B32)
jP[,Nt+1,1,1,,] <- B21$matmul(mP[,Nt+1,1,,])$matmul(B21) + Q
jP[,Nt+1,2,1,,] <- B22$matmul(mP[,Nt+1,1,,])$matmul(B22) + Q
jP[,Nt+1,2,2,,] <- B22$matmul(mP[,Nt+1,2,,])$matmul(B22) + Q
tPr[,Nt+1,1,1] <- (gamma1 + eta1_pred[,Nt+1,]$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[,Nt+1,2,1] <- 1 - tPr[,Nt+1,1,1]
jPr[,Nt+1,1,1] <- tPr[,Nt+1,1,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,1] <- tPr[,Nt+1,2,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,2] <- mPr[,Nt+1,2]
eta1_pred[,Nt+2,] <- jEta[,Nt+1,1,1,] * jPr[,Nt+1,1,1]$unsqueeze(-1) + jEta[,Nt+1,2,1,] * jPr[,Nt+1,2,1]$unsqueeze(-1) + jEta[,Nt+1,2,2,] * jPr[,Nt+1,2,2]$unsqueeze(-1)
P_pred[,Nt+2,,] <- jP[,Nt+1,1,1,,] * jPr[,Nt+1,1,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,1,,] * jPr[,Nt+1,2,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,2,,] * jPr[,Nt+1,2,2]$unsqueeze(-1)$unsqueeze(-1)
mPr[,Nt+2,1] <- jPr[,Nt+1,1,1]
mPr[,Nt+2,2] <- jPr[,Nt+1,2,]$sum(2)
seed <- 42
init <- 1
set.seed(seed + init)
lEpsilon <- 1e-3
ceil <- 1e15
sEpsilon <- 1e-15
lr <- 1e-3
epsilon <- 1e-8
betas <- c(.9, .999)
const <- (2*pi)**(-O1/2)
#####################
# Measurement model #
#####################
model_cfa <- '
# latent variables
IQ =~ abiMath + TIMMS + totIQ'
y2_df <- as.data.frame(y2[,2:4])
colnames(y2_df) <- c('abiMath', 'TIMMS', 'totIQ')
fit_cfa <- cfa(model_cfa, data=y2_df)
eta2_score <- lavPredict(fit_cfa, method='Bartlett')
eta2 <- as.array(eta2_score[,1])
y1 <- torch_tensor(y1[,,1:O1])
eta2 <- torch_tensor(eta2)
sumLik_best <- -99
output_best <- NULL
# cat('Init step ', init, '\n')
iter <- 1
count <- 0
m <- v <- m_hat <- v_hat <- list()
# initialize parameters
B11 <- torch_tensor(abs(rnorm(L1, 0, .3)))
B12 <- torch_tensor(-abs(rnorm(L1, 0, .2)))
B21d <- torch_tensor(runif(L1, .6, 1))
B22d <- torch_tensor(runif(L1, .2, .6))
B31 <- torch_tensor(abs(rnorm(L1, 0, .15)))
B32 <- torch_tensor(-abs(rnorm(L1, 0, .1)))
Lmdd1 <- torch_tensor(runif(1, .5, 1.5))
Lmdd2 <- torch_tensor(runif(1, .5, 1.5))
Lmdd3 <- torch_tensor(runif(1, .5, 1.5))
Lmdd4 <- torch_tensor(runif(1, .5, 1.5))
Lmdd5 <- torch_tensor(runif(1, .5, 1.5))
Lmdd6 <- torch_tensor(runif(1, .5, 1.5))
Lmdd7 <- torch_tensor(runif(1, .5, 1.5))
gamma1 <- torch_tensor(4) # fixed
gamma2 <- torch_tensor(abs(rnorm(L1, 0, 1)))
Qd <- torch_tensor(rep(.3, L1)) # fixed
Rd <- torch_tensor(rep(.5, O1)) # fixed
theta <- list(B11=B11, B12=B12, B21d=B21d, B22d=B22d, B31=B31, B32=B32,
Lmdd1=Lmdd1, Lmdd2=Lmdd2, Lmdd3=Lmdd3, Lmdd4=Lmdd4, Lmdd5=Lmdd5, Lmdd6=Lmdd6, Lmdd7=Lmdd7,
Qd=Qd, Rd=Rd, gamma1=gamma1, gamma2=gamma2)
q <- length(torch_cat(theta))
jEta <- torch_full(c(N,Nt+1,2,2,L1), 0)
jP <- torch_full(c(N,Nt+1,2,2,L1,L1), 0)
jV <- torch_full(c(N,Nt,2,2,O1), NaN)
jF <- torch_full(c(N,Nt,2,2,O1,O1), NaN)
jEta2 <- torch_full(c(N,Nt,2,2,L1), 0)
jP2 <- torch_full(c(N,Nt,2,2,L1,L1), 0)
mEta <- torch_full(c(N,Nt+1,2,L1), 0)
mP <- torch_full(c(N,Nt+1,2,L1,L1), NaN)
W <- torch_full(c(N,Nt,2,2), NaN)
jPr <- torch_full(c(N,Nt+1,2,2), 0)
mLik <- torch_full(c(N,Nt), NaN)
jPr2 <- torch_full(c(N,Nt,2,2), 0)
mPr <- torch_full(c(N,Nt+2,2), NaN)
jLik <- torch_full(c(N,Nt,2,2), 0)
tPr <- torch_full(c(N,Nt+1,2,2), NaN)
KG <- torch_full(c(N,Nt,2,2,L1,O1), 0)
I_KGLmd <- torch_full(c(N,Nt,2,2,L1,L1), NaN)
subEta <- torch_full(c(N,Nt,2,2,L1), NaN)
eta1_pred <- torch_full(c(N,Nt+2,L1), NaN)
P_pred <- torch_full(c(N,Nt+2,L1,L1), NaN)
mP[,1,,,] <- torch_eye(L1)
mPr[,1,1] <- 1
mPr[,1,2] <- 0
tPr[,,1,2] <- 0
tPr[,,2,2] <- 1
Lmd <- torch_full(c(O1,L1), 0)
Lmd[1,1] <- Lmd[4,2] <- Lmd[6,3] <- Lmd[8,4] <- Lmd[10,5] <- Lmd[12,6] <- Lmd[15,7] <- 1
Lmd[2:3,1] <- Lmdd1
Lmd[5,2] <- Lmdd2
Lmd[7,3] <- Lmdd3
Lmd[9,4] <- Lmdd4
Lmd[11,5] <- Lmdd5
Lmd[13:14,6] <- Lmdd6
Lmd[16:17,7] <- Lmdd7
B21 <- B21d$diag()
B22 <- B22d$diag()
LmdT <- Lmd$transpose(1, 2)
Q <- Qd$diag()
R <- Rd$diag()
B1 <- torch_cat(c(B11, B12))$reshape(c(2, L1))
B2 <- torch_cat(c(B21, B22))$reshape(c(2, L1, L1))
B3 <- torch_cat(c(B31, B32))$reshape(c(2, L1))
for (t in 1:Nt) {
for (i in 1:N) {
#################
# Kalman filter #
#################
if (as.logical(sum(torch_isnan(y1[i,t,]))) <= 0) {
jEta[i,t,,,] <- B1$unsqueeze(-2) + mEta[i,t,,]$clone()$unsqueeze(2)$matmul(B2) + eta2[i]$clone()$unsqueeze(-1)$unsqueeze(-1)$unsqueeze(-1) * B3$unsqueeze(-2)
jP[i,t,,,,] <- mP[i,t,,,]$clone()$unsqueeze(2)$matmul(B2[2,,]**2) + Q$expand(c(2, 2, -1, -1))
jV[i,t,,,] <- y1[i,t,]$clone()$unsqueeze(-2)$unsqueeze(-2) - jEta[i,t,,,]$clone()$matmul(LmdT) # possible missingness
jF[i,t,,,,] <- Lmd$matmul(jP[i,t,,,,]$clone()$matmul(LmdT)) + R$expand(c(2, 2, -1, -1))
KG[i,t,,,,] <- jP[i,t,,,,]$clone()$matmul(LmdT)$matmul(jF[i,t,,,,]$clone()$cholesky_inverse())
jEta2[i,t,,,] <- jEta[i,t,,,] + KG[i,t,,,,]$clone()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()
I_KGLmd[i,t,,,,] <- torch_eye(L1)$expand(c(2,2,-1,-1)) - KG[i,t,,,,]$clone()$matmul(Lmd)
jP2[i,t,,,,] <- I_KGLmd[i,t,,,,]$clone()$matmul(jP[i,t,,,,]$clone())$matmul(I_KGLmd[i,t,,,,]$clone()$transpose(3, 4)) +
KG[i,t,,,,]$clone()$matmul(R)$matmul(KG[i,t,,,,]$clone()$transpose(3, 4))
jLik[i,t,,] <- sEpsilon + const * jF[i,t,,,,]$clone()$det()$clip(min=sEpsilon, max=ceil)**(-1) *
(-.5 * jF[i,t,,,,]$clone()$cholesky_inverse()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$unsqueeze(-2)$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$squeeze())$exp() # possible missingness
###################
# Hamilton filter #
###################
eta1_pred[i,t,] <- mPr[i,t,1]$clone()$unsqueeze(-1) * mEta[i,t,1,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1) * mEta[i,t,2,]$clone()
P_pred[i,t,,] <- mPr[i,t,1]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,1,,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,2,,]$clone()
tPr[i,t,1,1] <- (gamma1 + eta1_pred[i,t,]$clone()$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[i,t,2,1] <- 1 - tPr[i,t,1,1]
jPr[i,t,,] <- tPr[i,t,,]$clone() * mPr[i,t,]$clone()$unsqueeze(-1)
mLik[i,t] <- (jLik[i,t,,]$clone() * jPr[i,t,,]$clone())$sum()
jPr2[i,t,,] <- jLik[i,t,,]$clone() * jPr[i,t,,]$clone() / mLik[i,t]$clone()$unsqueeze(-1)$unsqueeze(-1) # possible missingness
mPr[i,t+1,] <- jPr2[i,t,,]$sum(2)$clip(min=sEpsilon, max=1-sEpsilon)
W[i,t,,] <- jPr2[i,t,,]$clone() / mPr[i,t+1,]$clone()$unsqueeze(-1)
mEta[i,t+1,,] <- (W[i,t,,]$clone()$unsqueeze(-1) * jEta2[i,t,,,]$clone())$sum(2)
subEta[i,t,,,] <- mEta[i,t+1,,]$unsqueeze(2) - jEta2[i,t,,,]
mP[i,t+1,,,] <- (W[i,t,,]$clone()$unsqueeze(-1)$unsqueeze(-1) * (jP2[i,t,,,,] + subEta[i,t,,,]$clone()$unsqueeze(-1)$matmul(subEta[i,t,,,]$clone()$unsqueeze(-2))))$sum(2)
}
if (as.logical(sum(torch_isnan(y1[i,t,]))) > 0) {
jEta2[i,t,,,] <- jEta2[i,t-1,,,]$clone()
jP2[i,t,,,,] <- jP2[i,t-1,,,,]$clone()
mEta[i,t+1,,] <- mEta[i,t,,]$clone()
mP[i,t+1,,,] <- mP[i,t,,,]$clone()
jPr2[i,t,,] <- jPr2[i,t-1,,]$clone()
mPr[i,t+1,] <- mPr[i,t,]$clone()
}
}
}
eta1_pred[,Nt+1,] <- mPr[,Nt+1,1]$unsqueeze(-1) * mEta[,Nt+1,1,] + mPr[,Nt+1,2]$unsqueeze(-1) * mEta[,Nt+1,2,]
P_pred[,Nt+1,,] <- mPr[,Nt+1,1]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,1,,] + mPr[,Nt+1,2]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,2,,]
jEta[,Nt+1,1,1,] <- B11 + mEta[,Nt+1,1,]$matmul(B21) + eta2$outer(B31)
jEta[,Nt+1,2,1,] <- B12 + mEta[,Nt+1,1,]$matmul(B22) + eta2$outer(B32)
jEta[,Nt+1,2,2,] <- B12 + mEta[,Nt+1,2,]$matmul(B22) + eta2$outer(B32)
jP[,Nt+1,1,1,,] <- B21$matmul(mP[,Nt+1,1,,])$matmul(B21) + Q
jP[,Nt+1,2,1,,] <- B22$matmul(mP[,Nt+1,1,,])$matmul(B22) + Q
jP[,Nt+1,2,2,,] <- B22$matmul(mP[,Nt+1,2,,])$matmul(B22) + Q
tPr[,Nt+1,1,1] <- (gamma1 + eta1_pred[,Nt+1,]$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[,Nt+1,2,1] <- 1 - tPr[,Nt+1,1,1]
jPr[,Nt+1,1,1] <- tPr[,Nt+1,1,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,1] <- tPr[,Nt+1,2,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,2] <- mPr[,Nt+1,2]
eta1_pred[,Nt+2,] <- jEta[,Nt+1,1,1,] * jPr[,Nt+1,1,1]$unsqueeze(-1) + jEta[,Nt+1,2,1,] * jPr[,Nt+1,2,1]$unsqueeze(-1) + jEta[,Nt+1,2,2,] * jPr[,Nt+1,2,2]$unsqueeze(-1)
P_pred[,Nt+2,,] <- jP[,Nt+1,1,1,,] * jPr[,Nt+1,1,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,1,,] * jPr[,Nt+1,2,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,2,,] * jPr[,Nt+1,2,2]$unsqueeze(-1)$unsqueeze(-1)
mPr[,Nt+2,1] <- jPr[,Nt+1,1,1]
mPr[,Nt+2,2] <- jPr[,Nt+1,2,]$sum(2)
seed <- 42
init <- 1
set.seed(seed + init)
lEpsilon <- 1e-3
ceil <- 1e15
sEpsilon <- 1e-15
lr <- 1e-3
epsilon <- 1e-8
betas <- c(.9, .999)
const <- (2*pi)**(-O1/2)
#####################
# Measurement model #
#####################
model_cfa <- '
# latent variables
IQ =~ abiMath + TIMMS + totIQ'
y2_df <- as.data.frame(y2[,2:4])
colnames(y2_df) <- c('abiMath', 'TIMMS', 'totIQ')
fit_cfa <- cfa(model_cfa, data=y2_df)
eta2_score <- lavPredict(fit_cfa, method='Bartlett')
# Call the preprocessing function and load the resulting variables into the global environment
source('library_202311011300.R')
source('preprocessing_202311011300.R')
lEpsilon <- 1e-3
ceil <- 1e15
sEpsilon <- 1e-15
lr <- 1e-3
epsilon <- 1e-8
betas <- c(.9, .999)
const <- (2*pi)**(-O1/2)
#####################
# Measurement model #
#####################
model_cfa <- '
# latent variables
IQ =~ abiMath + TIMMS + totIQ'
y2_df <- as.data.frame(y2[,2:4])
colnames(y2_df) <- c('abiMath', 'TIMMS', 'totIQ')
fit_cfa <- cfa(model_cfa, data=y2_df)
eta2_score <- lavPredict(fit_cfa, method='Bartlett')
eta2 <- as.array(eta2_score[,1])
library()
library_load()
#####################
# Measurement model #
#####################
model_cfa <- '
# latent variables
IQ =~ abiMath + TIMMS + totIQ'
y2_df <- as.data.frame(y2[,2:4])
colnames(y2_df) <- c('abiMath', 'TIMMS', 'totIQ')
fit_cfa <- cfa(model_cfa, data=y2_df)
eta2_score <- lavPredict(fit_cfa, method='Bartlett')
eta2 <- as.array(eta2_score[,1])
y1 <- torch_tensor(y1[,,1:O1])
eta2 <- torch_tensor(eta2)
sumLik_best <- -99
output_best <- NULL
# cat('Init step ', init, '\n')
iter <- 1
count <- 0
m <- v <- m_hat <- v_hat <- list()
# initialize parameters
B11 <- torch_tensor(abs(rnorm(L1, 0, .3)))
B12 <- torch_tensor(-abs(rnorm(L1, 0, .2)))
B21d <- torch_tensor(runif(L1, .6, 1))
B22d <- torch_tensor(runif(L1, .2, .6))
B31 <- torch_tensor(abs(rnorm(L1, 0, .15)))
B32 <- torch_tensor(-abs(rnorm(L1, 0, .1)))
Lmdd1 <- torch_tensor(runif(1, .5, 1.5))
Lmdd2 <- torch_tensor(runif(1, .5, 1.5))
Lmdd3 <- torch_tensor(runif(1, .5, 1.5))
Lmdd4 <- torch_tensor(runif(1, .5, 1.5))
Lmdd5 <- torch_tensor(runif(1, .5, 1.5))
Lmdd6 <- torch_tensor(runif(1, .5, 1.5))
Lmdd7 <- torch_tensor(runif(1, .5, 1.5))
gamma1 <- torch_tensor(4) # fixed
gamma2 <- torch_tensor(abs(rnorm(L1, 0, 1)))
Qd <- torch_tensor(rep(.3, L1)) # fixed
Rd <- torch_tensor(rep(.5, O1)) # fixed
theta <- list(B11=B11, B12=B12, B21d=B21d, B22d=B22d, B31=B31, B32=B32,
Lmdd1=Lmdd1, Lmdd2=Lmdd2, Lmdd3=Lmdd3, Lmdd4=Lmdd4, Lmdd5=Lmdd5, Lmdd6=Lmdd6, Lmdd7=Lmdd7,
Qd=Qd, Rd=Rd, gamma1=gamma1, gamma2=gamma2)
q <- length(torch_cat(theta))
jEta <- torch_full(c(N,Nt+1,2,2,L1), 0)
jP <- torch_full(c(N,Nt+1,2,2,L1,L1), 0)
jV <- torch_full(c(N,Nt,2,2,O1), NaN)
jF <- torch_full(c(N,Nt,2,2,O1,O1), NaN)
jEta2 <- torch_full(c(N,Nt,2,2,L1), 0)
jP2 <- torch_full(c(N,Nt,2,2,L1,L1), 0)
mEta <- torch_full(c(N,Nt+1,2,L1), 0)
mP <- torch_full(c(N,Nt+1,2,L1,L1), NaN)
W <- torch_full(c(N,Nt,2,2), NaN)
jPr <- torch_full(c(N,Nt+1,2,2), 0)
mLik <- torch_full(c(N,Nt), NaN)
jPr2 <- torch_full(c(N,Nt,2,2), 0)
mPr <- torch_full(c(N,Nt+2,2), NaN)
jLik <- torch_full(c(N,Nt,2,2), 0)
tPr <- torch_full(c(N,Nt+1,2,2), NaN)
KG <- torch_full(c(N,Nt,2,2,L1,O1), 0)
I_KGLmd <- torch_full(c(N,Nt,2,2,L1,L1), NaN)
subEta <- torch_full(c(N,Nt,2,2,L1), NaN)
eta1_pred <- torch_full(c(N,Nt+2,L1), NaN)
P_pred <- torch_full(c(N,Nt+2,L1,L1), NaN)
mP[,1,,,] <- torch_eye(L1)
mPr[,1,1] <- 1
mPr[,1,2] <- 0
tPr[,,1,2] <- 0
tPr[,,2,2] <- 1
Lmd <- torch_full(c(O1,L1), 0)
Lmd[1,1] <- Lmd[4,2] <- Lmd[6,3] <- Lmd[8,4] <- Lmd[10,5] <- Lmd[12,6] <- Lmd[15,7] <- 1
Lmd[2:3,1] <- Lmdd1
Lmd[5,2] <- Lmdd2
Lmd[7,3] <- Lmdd3
Lmd[9,4] <- Lmdd4
Lmd[11,5] <- Lmdd5
Lmd[13:14,6] <- Lmdd6
Lmd[16:17,7] <- Lmdd7
B21 <- B21d$diag()
B22 <- B22d$diag()
LmdT <- Lmd$transpose(1, 2)
Q <- Qd$diag()
R <- Rd$diag()
B1 <- torch_cat(c(B11, B12))$reshape(c(2, L1))
B2 <- torch_cat(c(B21, B22))$reshape(c(2, L1, L1))
B3 <- torch_cat(c(B31, B32))$reshape(c(2, L1))
for (t in 1:Nt) {
for (i in 1:N) {
#################
# Kalman filter #
#################
if (as.logical(sum(torch_isnan(y1[i,t,]))) <= 0) {
jEta[i,t,,,] <- B1$unsqueeze(-2) + mEta[i,t,,]$clone()$unsqueeze(2)$matmul(B2) + eta2[i]$clone()$unsqueeze(-1)$unsqueeze(-1)$unsqueeze(-1) * B3$unsqueeze(-2)
jP[i,t,,,,] <- mP[i,t,,,]$clone()$unsqueeze(2)$matmul(B2[2,,]**2) + Q$expand(c(2, 2, -1, -1))
jV[i,t,,,] <- y1[i,t,]$clone()$unsqueeze(-2)$unsqueeze(-2) - jEta[i,t,,,]$clone()$matmul(LmdT) # possible missingness
jF[i,t,,,,] <- Lmd$matmul(jP[i,t,,,,]$clone()$matmul(LmdT)) + R$expand(c(2, 2, -1, -1))
KG[i,t,,,,] <- jP[i,t,,,,]$clone()$matmul(LmdT)$matmul(jF[i,t,,,,]$clone()$cholesky_inverse())
jEta2[i,t,,,] <- jEta[i,t,,,] + KG[i,t,,,,]$clone()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()
I_KGLmd[i,t,,,,] <- torch_eye(L1)$expand(c(2,2,-1,-1)) - KG[i,t,,,,]$clone()$matmul(Lmd)
jP2[i,t,,,,] <- I_KGLmd[i,t,,,,]$clone()$matmul(jP[i,t,,,,]$clone())$matmul(I_KGLmd[i,t,,,,]$clone()$transpose(3, 4)) +
KG[i,t,,,,]$clone()$matmul(R)$matmul(KG[i,t,,,,]$clone()$transpose(3, 4))
jLik[i,t,,] <- sEpsilon + const * jF[i,t,,,,]$clone()$det()$clip(min=sEpsilon, max=ceil)**(-1) *
(-.5 * jF[i,t,,,,]$clone()$cholesky_inverse()$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$unsqueeze(-2)$matmul(jV[i,t,,,]$clone()$unsqueeze(-1))$squeeze()$squeeze())$exp() # possible missingness
###################
# Hamilton filter #
###################
eta1_pred[i,t,] <- mPr[i,t,1]$clone()$unsqueeze(-1) * mEta[i,t,1,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1) * mEta[i,t,2,]$clone()
P_pred[i,t,,] <- mPr[i,t,1]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,1,,]$clone() + mPr[i,t,2]$clone()$unsqueeze(-1)$unsqueeze(-1) * mP[i,t,2,,]$clone()
tPr[i,t,1,1] <- (gamma1 + eta1_pred[i,t,]$clone()$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[i,t,2,1] <- 1 - tPr[i,t,1,1]
jPr[i,t,,] <- tPr[i,t,,]$clone() * mPr[i,t,]$clone()$unsqueeze(-1)
mLik[i,t] <- (jLik[i,t,,]$clone() * jPr[i,t,,]$clone())$sum()
jPr2[i,t,,] <- jLik[i,t,,]$clone() * jPr[i,t,,]$clone() / mLik[i,t]$clone()$unsqueeze(-1)$unsqueeze(-1) # possible missingness
mPr[i,t+1,] <- jPr2[i,t,,]$sum(2)$clip(min=sEpsilon, max=1-sEpsilon)
W[i,t,,] <- jPr2[i,t,,]$clone() / mPr[i,t+1,]$clone()$unsqueeze(-1)
mEta[i,t+1,,] <- (W[i,t,,]$clone()$unsqueeze(-1) * jEta2[i,t,,,]$clone())$sum(2)
subEta[i,t,,,] <- mEta[i,t+1,,]$unsqueeze(2) - jEta2[i,t,,,]
mP[i,t+1,,,] <- (W[i,t,,]$clone()$unsqueeze(-1)$unsqueeze(-1) * (jP2[i,t,,,,] + subEta[i,t,,,]$clone()$unsqueeze(-1)$matmul(subEta[i,t,,,]$clone()$unsqueeze(-2))))$sum(2)
}
if (as.logical(sum(torch_isnan(y1[i,t,]))) > 0) {
jEta2[i,t,,,] <- jEta2[i,t-1,,,]$clone()
jP2[i,t,,,,] <- jP2[i,t-1,,,,]$clone()
mEta[i,t+1,,] <- mEta[i,t,,]$clone()
mP[i,t+1,,,] <- mP[i,t,,,]$clone()
jPr2[i,t,,] <- jPr2[i,t-1,,]$clone()
mPr[i,t+1,] <- mPr[i,t,]$clone()
}
}
}
eta1_pred[,Nt+1,] <- mPr[,Nt+1,1]$unsqueeze(-1) * mEta[,Nt+1,1,] + mPr[,Nt+1,2]$unsqueeze(-1) * mEta[,Nt+1,2,]
P_pred[,Nt+1,,] <- mPr[,Nt+1,1]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,1,,] + mPr[,Nt+1,2]$unsqueeze(-1)$unsqueeze(-1) * mP[,Nt+1,2,,]
jEta[,Nt+1,1,1,] <- B11 + mEta[,Nt+1,1,]$matmul(B21) + eta2$outer(B31)
jEta[,Nt+1,2,1,] <- B12 + mEta[,Nt+1,1,]$matmul(B22) + eta2$outer(B32)
jEta[,Nt+1,2,2,] <- B12 + mEta[,Nt+1,2,]$matmul(B22) + eta2$outer(B32)
jP[,Nt+1,1,1,,] <- B21$matmul(mP[,Nt+1,1,,])$matmul(B21) + Q
jP[,Nt+1,2,1,,] <- B22$matmul(mP[,Nt+1,1,,])$matmul(B22) + Q
jP[,Nt+1,2,2,,] <- B22$matmul(mP[,Nt+1,2,,])$matmul(B22) + Q
tPr[,Nt+1,1,1] <- (gamma1 + eta1_pred[,Nt+1,]$matmul(gamma2))$sigmoid()$clip(min=sEpsilon, max=1-sEpsilon)
tPr[,Nt+1,2,1] <- 1 - tPr[,Nt+1,1,1]
jPr[,Nt+1,1,1] <- tPr[,Nt+1,1,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,1] <- tPr[,Nt+1,2,1] * mPr[,Nt+1,1]
jPr[,Nt+1,2,2] <- mPr[,Nt+1,2]
eta1_pred[,Nt+2,] <- jEta[,Nt+1,1,1,] * jPr[,Nt+1,1,1]$unsqueeze(-1) + jEta[,Nt+1,2,1,] * jPr[,Nt+1,2,1]$unsqueeze(-1) + jEta[,Nt+1,2,2,] * jPr[,Nt+1,2,2]$unsqueeze(-1)
P_pred[,Nt+2,,] <- jP[,Nt+1,1,1,,] * jPr[,Nt+1,1,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,1,,] * jPr[,Nt+1,2,1]$unsqueeze(-1)$unsqueeze(-1) + jP[,Nt+1,2,2,,] * jPr[,Nt+1,2,2]$unsqueeze(-1)$unsqueeze(-1)
mPr[,Nt+2,1] <- jPr[,Nt+1,1,1]
mPr[,Nt+2,2] <- jPr[,Nt+1,2,]$sum(2)
mPr[,Nt+1,2]
mPr[,Nt+1,1]
mPr[,1,1]
mPr[,1,2]
mPr[,2,2]
mPr[,4,2]
Nt
mPr[,Nt,2]
sigmoid(4)
max(mPr[,Nt,2])
