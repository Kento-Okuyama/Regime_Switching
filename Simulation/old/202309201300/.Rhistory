summary(sensitivity_vec)
summary(specificity_vec)
summary(delta1_vec)
summary(delta1_N_vec)
ind <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {ind[[seed]] <- seed} }
ind_vec <- unlist(ind)
params_list <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
params <- unlist(readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep='')))
ifelse(seed>1, params_list <- cbind(params_list, params), params_list <- params)
} else {ifelse(seed>1, params_list <- cbind(params_list, -99), params_list <- -99)} }
colnames(params_list) <- 1:nSim
S_list <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
S_list[[seed]] <- df$S } }
# Set smaller margins
par(mar = c(2, 2, 2, 2)) # c(bottom, left, top, right)
# Create a layout for the plots with 4 rows and 4 columns
par(mfrow = c(4, 4))
# Loop through each row and plot a histogram
for (i in c(1:12, 33:nrow(params_list))) {
hist(params_list[i,], main = names(params)[i], xlab=NULL, ylab=NULL) }
# Reset the layout
par(mfrow = c(1,1)); par(mar = c(5, 4, 4, 2) + 0.1)
# evaluation of the regime prediction
sim <- 8
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
cTable_list
source('result_202309201300.R')
foreach(ind=1:nNT, .packages=c('reshape', 'ggplot2', 'plotly', 'sigmoid', 'Rlab', 'cowplot', 'lavaan', 'torch', 'reticulate', 'cowplot')) %:%
foreach(seed=1:47) %dopar% {
print(c(ind, seed))
N <- N_vec[ind]
Nt <- Nt_vec[ind]
df <- DGP(seed, N, Nt, O1, O2, L1)
#df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
params <- filtering(seed, N, Nt, O1, O2, L1, df$y1, df$y2, nInit, maxIter)
#params <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
output <- result(N, Nt, O1, O2, L1, df$y1, df$y2, params, df$S, df$eta1)
saveRDS(df, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
saveRDS(params, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
saveRDS(output, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
}
if (!requireNamespace('doParallel', quietly = TRUE)) {
install.packages('doParallel') }
library(doParallel)
cl <- makeCluster(7)
registerDoParallel(cl)
source('library_202309201300.R')
source('DGP_202309201300.R')
source('filtering_202309201300.R')
source('result_202309201300.R')
library_load()
N_vec <- c(25, 25, 50, 50, 100, 100)
Nt_vec <- c(25, 50, 25, 50, 25, 50)
O1 <- 6
O2 <- 3
L1 <- 2
nInit <- 15
maxIter <- 500
nNT <- 6/6
nSim <- 200
foreach(ind=1:nNT, .packages=c('reshape', 'ggplot2', 'plotly', 'sigmoid', 'Rlab', 'cowplot', 'lavaan', 'torch', 'reticulate', 'cowplot')) %:%
foreach(seed=1:47) %dopar% {
print(c(ind, seed))
N <- N_vec[ind]
Nt <- Nt_vec[ind]
df <- DGP(seed, N, Nt, O1, O2, L1)
#df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
params <- filtering(seed, N, Nt, O1, O2, L1, df$y1, df$y2, nInit, maxIter)
#params <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
output <- result(N, Nt, O1, O2, L1, df$y1, df$y2, params, df$S, df$eta1)
saveRDS(df, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
saveRDS(params, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
saveRDS(output, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
}
foreach(ind=1:nNT, .packages=c('reshape', 'ggplot2', 'plotly', 'sigmoid', 'Rlab', 'cowplot', 'lavaan', 'torch', 'reticulate', 'cowplot')) %:%
foreach(seed=1:47) %dopar% {
print(c(ind, seed))
N <- N_vec[ind]
Nt <- Nt_vec[ind]
#df <- DGP(seed, N, Nt, O1, O2, L1)
df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
#params <- filtering(seed, N, Nt, O1, O2, L1, df$y1, df$y2, nInit, maxIter)
params <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
output <- result(N, Nt, O1, O2, L1, df$y1, df$y2, params, df$S, df$eta1)
saveRDS(df, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
saveRDS(params, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
saveRDS(output, paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1, '.RDS', sep=''))
}
stopCluster(cl)
setwd('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300')
source('library_202309201300.R')
library_load()
N <- 25
Nt <- 25
O1 <- 6
O2 <- 3
L1 <- 2
nSim <- 47
mPr_list <- list()
mPr_sm_list <- list()
cTable_list <- list()
sumLik_vec <- vector(mode='numeric', length=nSim)
sumLik_NT_vec <- vector(mode='numeric', length=nSim)
sensitivity_vec <- vector(mode='numeric', length=nSim)
specificity_vec <- vector(mode='numeric', length=nSim)
delta1_vec <- vector(mode='numeric', length=nSim)
delta1_N_vec <- vector(mode='numeric', length=nSim)
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
output <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
mPr_list[[seed]] <- output$mPr
mPr_sm_list[[seed]] <- output$mPr_sm
cTable_list[[seed]] <- output$cTable
sumLik_vec[seed] <- output$sumLik
sumLik_NT_vec[seed] <- output$sumLik_NxT
sensitivity_vec[seed] <- ifelse(is.numeric(output$sensitivity), output$sensitivity, -99)
specificity_vec[seed] <- ifelse(is.numeric(output$specificity), output$specificity, -99)
delta1_vec[seed] <- ifelse(is.numeric(output$delta1), output$delta1, -99)
delta1_N_vec[seed] <- ifelse(is.numeric(output$delta1_N), output$delta1_N, -99) } }
cTable_list
mPr_list
mPr_sm_list
summary(sumLik_vec)
summary(sumLik_NT_vec)
summary(sensitivity_vec)
summary(specificity_vec)
summary(delta1_vec)
summary(delta1_N_vec)
ind <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {ind[[seed]] <- seed} }
ind_vec <- unlist(ind)
params_list <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
params <- unlist(readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/params__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep='')))
ifelse(seed>1, params_list <- cbind(params_list, params), params_list <- params)
} else {ifelse(seed>1, params_list <- cbind(params_list, -99), params_list <- -99)} }
colnames(params_list) <- 1:nSim
S_list <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
S_list[[seed]] <- df$S } }
# Set smaller margins
par(mar = c(2, 2, 2, 2)) # c(bottom, left, top, right)
# Create a layout for the plots with 4 rows and 4 columns
par(mfrow = c(4, 4))
# Loop through each row and plot a histogram
for (i in c(1:12, 33:nrow(params_list))) {
hist(params_list[i,], main = names(params)[i], xlab=NULL, ylab=NULL) }
# Reset the layout
par(mfrow = c(1,1)); par(mar = c(5, 4, 4, 2) + 0.1)
# evaluation of the regime prediction
sim <- 8
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
cTable_list
stopCluster(cl)
# evaluation of the regime prediction
sim <- 35
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
DO
max(DO)
S_list[[sim]]
S_list[[sim]][20:25,]
S_list[[sim]][24,]
DO[24,]
DO[25,]
params_list
params_list[,sim]
cTable_list
# evaluation of the regime prediction
sim <- 47
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
params_list[,seed]
params_list[,35]
params_list[,47]
rbind(params_list[,35], params_list[,47])
setwd('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300')
source('library_202309201300.R')
library_load()
N <- 100
Nt <- 50
O1 <- 6
O2 <- 3
L1 <- 2
nSim <- 23
mPr_list <- list()
mPr_sm_list <- list()
cTable_list <- list()
sumLik_vec <- vector(mode='numeric', length=nSim)
sumLik_NT_vec <- vector(mode='numeric', length=nSim)
sensitivity_vec <- vector(mode='numeric', length=nSim)
specificity_vec <- vector(mode='numeric', length=nSim)
delta1_vec <- vector(mode='numeric', length=nSim)
delta1_N_vec <- vector(mode='numeric', length=nSim)
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
output <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/output__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
mPr_list[[seed]] <- output$mPr
mPr_sm_list[[seed]] <- output$mPr_sm
cTable_list[[seed]] <- output$cTable
sumLik_vec[seed] <- output$sumLik
sumLik_NT_vec[seed] <- output$sumLik_NxT
sensitivity_vec[seed] <- ifelse(is.numeric(output$sensitivity), output$sensitivity, -99)
specificity_vec[seed] <- ifelse(is.numeric(output$specificity), output$specificity, -99)
delta1_vec[seed] <- ifelse(is.numeric(output$delta1), output$delta1, -99)
delta1_N_vec[seed] <- ifelse(is.numeric(output$delta1_N), output$delta1_N, -99) } }
cTable_list
mPr_list
cTable_list
cTable_list[[1]]
sum(cTable_list[[1]])
sum(cTable_list[[2]])
for (i in 1:nSim) {print(sum(cTable_list[[sim]]))}
nSim
for (i in 1:nSim) {print(sum(cTable_list[[i]]))}
rbind(params_list[,1], params_list[,2])
rbind(params_list[,4], params_list[,5])
# evaluation of the regime prediction
sim <- 1
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 2
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
seed
N
Nt
S_list <- list()
for (seed in 1:nSim) {
if (file.exists(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))) {
df <- readRDS(paste('C:/Users/kento/OneDrive - UT Cloud/Tuebingen/Research/Methods Center/Regime_Switching/Simulation/202309201300/output/df__sim_', seed, '_N_', N, '_T_', Nt, '_O1_', O1, '_O2_', O2, '_L1_', L1,'.RDS', sep=''))
S_list[[seed]] <- df$S } }
# Set smaller margins
par(mar = c(2, 2, 2, 2)) # c(bottom, left, top, right)
# Create a layout for the plots with 4 rows and 4 columns
par(mfrow = c(4, 4))
# Loop through each row and plot a histogram
for (i in c(1:12, 33:nrow(params_list))) {
hist(params_list[i,], main = names(params)[i], xlab=NULL, ylab=NULL) }
# Reset the layout
par(mfrow = c(1,1)); par(mar = c(5, 4, 4, 2) + 0.1)
# evaluation of the regime prediction
sim <- 2
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 1
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 2
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 4
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 5
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
sim <- 1
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 2
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 4
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 5
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sumLik_NT_vec
sim <- 7
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 10
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 12
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 17
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 19
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 30
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 20
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 21
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 22
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
sim <- 9
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
cTable_list
sumLik_NT_vec
sumLik_vec
cTable_list
cTable_list
cTable_list[[1]]
cTable_list[[2]]
cTable_list[[1]]+cTable_list[[1]]
cTable_list[[1]]+cTable_list[[2]]
unlist(cTable_list)
sum(cTable_list)
cTable_total <- 0 * cTable_list[[1]]
cTable_total <- 0 * cTable_list[[1]]
cTable_total
cTable_list[[6]]
cTable_list
cTable_list[[16]]
is.null(cTable_list[[16]])
cTable_total <- 0 * cTable_list[[1]]
for (i  in 1:23) {
if (!is.null(cTable_list[[i]])) {cTable_total <- cTable_total + cTable_list[[i]]} }
cTable_total
cTable_total <- 0 * cTable_list[[1]]
for (i  in 1:23) {
if (!is.null(cTable_list[[i]])) {cTable_total <- cTable_total + cTable_list[[i]]} }
sensitivity_total <- cTable_total[2,2] / sum(cTable_total[2,])
specificity_total <- cTable_total[1,1] / sum(cTable_total[1,])
sensitivity_total
specificity_total
cTable_total
# contingency table
cTable_list
cTable_total <- 0 * cTable_list[[1]]
for (i  in 1:23) {
if (!is.null(cTable_list[[i]])) {cTable_total <- cTable_total + cTable_list[[i]]} }
sensitivity_total <- cTable_total[2,2] / sum(cTable_total[2,])
specificity_total <- cTable_total[1,1] / sum(cTable_total[1,])
cTable_total
sensitivity_vec
specificity_vec
sumLik_vec
cbind(sumLik_vec, sensitivity_vec, specificity_vec)
# evaluation of the regime prediction
sim <- 5
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
# evaluation of the regime prediction
sim <- 1
cTable_list[[sim]]
sensitivity_vec[[sim]]
specificity_vec[[sim]]
DO <- mPr_list[[sim]]
DO2 <- mPr_sm_list[[sim]]
df_S <- melt(S_list[[sim]]); colnames(df_S) <- c('ID', 'time', 'S')
plot_S <- ggplot(data=df_S, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr <- melt(as.array(DO)); colnames(df_Pr) <- c('ID', 'time', 'S')
plot_Pr <- ggplot(data=df_Pr, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
df_Pr2 <- melt(as.array(DO2)); colnames(df_Pr2) <- c('ID', 'time', 'S')
plot_Pr2 <- ggplot(data=df_Pr2, aes(time, ID, fill=S)) + geom_tile(color='grey') + scale_fill_gradient(low='white',high='red') + theme(legend.position='none')
plot_grid(plot_S, plot_Pr, plot_Pr2, labels = "AUTO")
